#include "cylinder.h"

using namespace std;
Cylinder::Cylinder(int nb) :
		TriMesh() {
	_name = "Cylinder";
	float centreX = 0;
	float centreY = 0;
	float rayon, x, y, z;

	// Cercle du bas
	centreX = 0;
	centreY = 0;
	z = -1;
	rayon = 1;
	GLfloat smallPs[nb + 1][3];

	smallPs[nb][0] = centreX;
	smallPs[nb][1] = centreY;
	smallPs[nb][2] = z;
	for (int i = 0; i < nb; ++i) {
		x = centreX + rayon * cosf(2 * i * M_PI / nb);
		y = centreY + rayon * sinf(2 * i * M_PI / nb);
		smallPs[i][0] = x;
		smallPs[i][1] = y;
		smallPs[i][2] = z;

	}

	// Cercle du haut
	centreX = 0;
	centreY = 0;
	z = 1;
	rayon = 1;
	GLfloat bigPs[nb][3];

	bigPs[nb][0] = centreX;
	bigPs[nb][1] = centreY;
	bigPs[nb][2] = z;
	for (int i = 0; i < nb; ++i) {
		x = centreX + rayon * cosf(2 * i * M_PI / nb);
		y = centreY + rayon * sinf(2 * i * M_PI / nb);
		bigPs[i][0] = x;
		bigPs[i][1] = y;
		bigPs[i][2] = z;

	}

	// Corp du cylindre
	GLint ts[nb * 2][3];
	for (int i = 0; i < nb - 1; ++i) {

		ts[i][0] = i;
		ts[i][1] = i + 1;
		ts[i][2] = i + nb + 1;

		ts[i + nb][0] = i;
		ts[i + nb][2] = i + nb;
		ts[i + nb][1] = i + nb + 1;

	}
	ts[nb - 1][0] = nb - 1;
	ts[nb - 1][1] = 0;
	ts[nb - 1][2] = nb;

	ts[2 * nb - 1][0] = nb - 1;
	ts[2 * nb - 1][2] = 2 * nb - 1;
	ts[2 * nb - 1][1] = nb;

	// disk bas
	GLint dBasTs[nb][3];
	for (int i = 1; i < nb; ++i) {

		dBasTs[i - 1][0] = 2*nb;
		dBasTs[i - 1][1] = i - 1;
		dBasTs[i - 1][2] = i;

	}
	dBasTs[nb - 1][0] = 2*nb;
	dBasTs[nb - 1][1] = nb-1;
	dBasTs[nb - 1][2] = 0;

	//disk haut
	GLint dHautTs[nb][3];
	for (int i = 1; i < nb; ++i) {

		dHautTs[i - 1][0] = 2*nb+1;
		dHautTs[i - 1][1] = nb+i - 1;
		dHautTs[i - 1][2] = nb+i;

	}
	dHautTs[nb - 1][0] = 2*nb+1;
	dHautTs[nb - 1][1] = 2*nb-1;
	dHautTs[nb - 1][2] = nb;

	int i;

	for (i = 0; i < nb; ++i) {

		addVertex(smallPs[i][0], smallPs[i][1], smallPs[i][2]);
	}
	for (i = 0; i < nb; ++i) {

		addVertex(bigPs[i][0], bigPs[i][1], bigPs[i][2]);

	}
	addVertex(smallPs[nb][0], smallPs[nb][1], smallPs[nb][2]);
	addVertex(bigPs[nb][0], bigPs[nb][1], bigPs[nb][2]);

	for (i = 0; i < 2 * nb; ++i) {

		addTriangle(ts[i][0], ts[i][1], ts[i][2]);
	}
	for (i = 0; i < nb; ++i) {

		addTriangle(dBasTs[i][0], dBasTs[i][2], dBasTs[i][1]);
	}
	for (i = 0; i < nb; ++i) {

		addTriangle(dHautTs[i][0], dHautTs[i][1], dHautTs[i][2]);
	}

	computeNormalsT();  // to be fixed
	computeNormalsV();  // to be fixed
}
